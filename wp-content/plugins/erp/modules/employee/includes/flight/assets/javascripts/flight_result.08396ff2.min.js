via.define("via.flights", function() {
    function FlightsResults(searchList, opts) {
        this.searchList = searchList, this.query = this.searchList.searchQuery, this.showCheapestFlightBox = opts.showCheapestFlightBox, this.initialize()
    }
    return FlightsResults.prototype = {
        initialize: function() {
            this.populateDefaults(), this.cacheElements(), this.bindEvents(), this.subscriptions(), this.asyncTask(), window.digitalSearchData && (this.showCheapestFlightBox ? digitalSearchData.flight.cheapestBox = "true" : digitalSearchData.flight.cheapestBox = "false")
        },
        populateDefaults: function() {
            this.options = {
                isDomestic: this.query.domestic,
                isReturn: !this.query.multiCity && 2 === this.query.sectorInfos.length,
                isMultiCity: this.query.multiCity,
                isDomesticMulticity: this.query.domestic && this.query.multiCity && 2 === this.query.sectorInfos.length && "IN" === pageOpts.currentEnv,
                currency: this.searchList.webDta.envDta.currencySymbol,
                query: this.query
            }, this.options.isReturn = this.options.isReturn || this.options.isDomesticMulticity, this.options.isCombined = !this.options.isDomestic && this.options.isReturn, this.options.dateRangeValidity = {
                onward: this.getDateRangeValidity(via.date.strToDateObj(this.query.sectorInfos[0].date)),
                "return": this.options.isReturn ? this.getDateRangeValidity(via.date.strToDateObj(this.query.sectorInfos[1].date)) : {}
            }, this.journeys = {
                onwardJourneys: [],
                returnJourneys: [],
                combinedJourneys: []
            }, this.sortBy = {
                onward: {
                    name: "price",
                    type: "asc"
                },
                "return": {
                    name: "price",
                    type: "asc"
                }
            }, this.returnSortBy = {
                name: "price",
                type: "asc"
            }, this.sortByTarget = "", this.sortByHTML = "", this.toBeRendered, this.minPrice = 1 / 0, this.maxPrice = 0, this.filterQuery, this.isAjaxCompleted = !1, this.widget = {
                cheapestFlights: {},
                fastestFlights: {},
                showCheapestOnly: !1,
                options: this.options
            }, this.price = {
                onwardPrice: 0,
                returnPrice: 0,
                totalPrice: 0
            }, this.selectedJourneys = {
                onward: null,
                "return": null
            }, this.specialReturns = {}, this.discountedReturns = 0, this.specialReturnsReceived = 0, this.requestCompleteStatus = !1, this.airlineCount = 0, this.form = document.flightResultForm, this.dataReceivedAtleastOnce = !1, this.form.onwardKey.value = -1, this.form.returnKey.value = -1, this.scrollinationConfig = {
                triggerAt: .4,
                scrollLength: 30,
                renderedIndex: 0,
                hasMoreItems: !0,
                resetSelf: function() {
                    this.triggerAt = .4, this.scrollLength = 30, this.renderedIndex = 0, this.hasMoreItems = !0
                }
            }, this.visibleFlightDetail = null, this.visiblefltRetDet = null
        },
        cacheElements: function() {
            this.$container = $("#searchResultContainer .resultSet"), this.modifyContainer = $(".modifySearch"), this.template = _.template($("#flightResultsTemplate").html(), {}), this.resultsOptsTemplate = _.template($("#flightResultsOptsTemplate").html(), {}), this.resultContainerTemplate = _.template($("#flightResultsContainer").html(), {}), this.resultTemplate = _.template($("#flightResultTemplate").html(), {}), this.resultSplitTemplate = _.template($("#flightResultSplitTemplate").html(), {}), this.resultOptsTemplate = _.template($("#flightResultOptsTemplate").html(), {}), this.resultPriceTemplate = _.template($("#flightResultPriceTemplate").html(), {}), this.resultTabsTemplate = _.template($("#flightResultTabsTemplate").html(), {}), this.resultAmenitiesTemplate = _.template($("#flightResultAmenitiesTemplate").html(), {}), this.resultDetailsTemplate = _.template($("#flightResultDetailsTemplate").html(), {}), this.resultFareTemplate = _.template($("#flightResultFareTemplate").html(), {}), this.resultFareRulesTemplate = _.template($("#flightRulesTemplate").html(), {}), this.resultBaggageTemplate = _.template($("#flightResultBaggageTemplate").html(), {}), this.emailSubjectTemplate = _.template($("#emailSubjectTemplate").html(), {}), this.domesticBookPanel = _.template($("#domesticBookPanelTemplate").html(), {}), this.domesticBookPanelReset = _.template($("#domesticBookPanelResetTemplate").html(), {}), this.emailSubject = this.emailSubjectTemplate({
                isReturn: this.options.isReturn || this.options.isDomesticMulticity,
                src: this.query.sectorInfos[0].src.city,
                dest: this.query.sectorInfos[0].dest.city,
                departDate: this.query.sectorInfos[0].date,
                returnDate: this.options.isReturn ? this.query.sectorInfos[1].date : ""
            }), this.noResultsFoundTemplate = _.template($("#noResultFound").html(), {}), this.sortTemplate = _.template($("#resultSorterTemplate").html(), {}), this.discountTemplate = _.template($("#discountedPriceTemplate").html(), {}), this.noResultsFilteredTemplate = _.template($("#noResultsFilteredTemplate").html(), {})
        },
        bindEvents: function() {
            var _this = this;
            $("#flightSearchResults").on("click", ".noResultModifyBtn", function() {
                $(".modifyCTA").trigger("click")
            });
            var modifySearch = $(".modifySearch"),
                stickyOffset = modifySearch.offset(),
                getResultChildrenHeight = function() {
                    var currentContainer = $("#searchResultContainer .resultSet"),
                        onwardHeight = 0;
                    currentContainer.find(".onwardResults").each(function(index, el) {
                        onwardHeight += $(el).innerHeight()
                    });
                    var returnHeight = 0;
                    currentContainer.find(".returnResults").each(function(index, el) {
                        returnHeight += $(el).innerHeight()
                    });
                    var maxHeight = Math.max(onwardHeight, returnHeight);
                    return maxHeight
                };
            $(window).scroll(_.throttle(function() {
                var scrollTop = $(document).scrollTop();
                modifySearch.removeClass("topFixed"), $(".modifySearchBox").removeClass("topFixed"), $("#resultFilter").removeClass("topFixed"), $("#resultFilter").removeClass("multiTopFixed"), scrollTop > stickyOffset.top && (modifySearch.addClass("topFixed"), _this.options.isMultiCity ? $("#resultFilter").addClass("multiTopFixed") : $("#resultFilter").addClass("topFixed"), $(".modifySearchBox").addClass("topFixed"));
                var resultSetHeight = _this.options.isDomestic && _this.options.isReturn ? getResultChildrenHeight() : $("#searchResultContainer .resultSet").innerHeight();
                resultSetHeight -= _this.scrollinationConfig.triggerAt * resultSetHeight, scrollTop > resultSetHeight && _this.render(!0)
            }, 500));
            var historyState = window.history.state;
            $(window).on("popstate", function(event) {
                historyState && !window.history.state && window.location.reload()
            }), this.modifyContainer.on("click", ".modifyCTA", function() {
                $(".modifySearchBox").slideToggle("slow"), $(this).toggleClass("openState"), $(".fltFilterView").toggle(), $("#resultFilter,.arrowTip").hide()
            }), $(".emailFares").hide(), $(".modifyCTA").on("click", this.showModifyCTA.bind(this)), $(".bookPanelContainer").on("click", ".bookCTA.return", this.book.bind(this)), $(".emailFares").on("click", this.showEmailModal.bind(this)), $("body").on("click", function() {
                $(".dropDown").hide()
            }), this.$container.on("click", ".addToEmail", this.selectEmail.bind(this)), this.$container.on("click", "li.flightDetails", this.showDetails.bind(this, ".onwFltDetDiv")), this.$container.on("click", "li.fareDetails", this.showDetails.bind(this, ".onwFareDetDiv")), this.$container.on("click", "li.bagInfo", this.showDetails.bind(this, ".onwBagInfoDiv")), this.$container.on("click", "li.fare-rules", this.showDetails.bind(this, ".onwFareRulesDiv")), this.$container.on("click", "li.retflightDetails", this.rtShowDetails.bind(this, ".retfltDetDiv")), this.$container.on("click", "li.retfareDetails", this.rtShowDetails.bind(this, ".retfareDetDiv")), this.$container.on("click", "li.retbagInfo", this.rtShowDetails.bind(this, ".retbagInfoDiv")), this.$container.on("click", "li.retfare-rules", this.rtShowDetails.bind(this, ".retfareRulesDiv")), this.$container.on("click", ".sortClass", this.sortItems.bind(this)), this.$container.on("click", ".price > .setSort", this.toggleDropdown.bind(this)), this.$container.on("click", ".onwardDropDown > div", this.sortItemsForSplit.bind(this, "onward")), this.$container.on("click", ".returnDropDown > div", this.sortItemsForSplit.bind(this, "return")), this.$container.on("click", ".fareTrend", this.showFareTrends.bind(this)), this.$container.on("click", ".ft-close", this.closeFareTrends.bind(this)), this.$container.on("click", ".bookCTA", this.updateItineraryKey.bind(this)), this.$container.on("click", ".via_prev_day", this.switchToPrevDay.bind(this)), this.$container.on("click", ".via_next_day", this.switchToNextDay.bind(this)), this.$container.on("click", ".flightSector > li", this.fareRuleTab.bind(this)), this.$container.on("click", ".fltDetTab", this.flightDetailsTab.bind(this)), this.$container.on("click", ".fltRetDetTab", this.fltRetDetailsTab.bind(this)), this.$container.on("click", ".fltOpenState", this.flightCloseState.bind(this)), this.$container.on("click", ".retfltOpenState", this.retflightCloseState.bind(this)), setTimeout(function() {
                location.reload(!0)
            }, 15e5)
        },
        getDateRangeValidity: function(date) {
            var isntPast = function(d) {
                    return d > via.date.today()
                },
                isnt366 = function(d) {
                    var day = via.date.today(),
                        yearFromToday = new Date(day.setFullYear(day.getFullYear() + 1));
                    return d < yearFromToday
                };
            return {
                prev: isntPast(date),
                next: isnt366(date)
            }
        },
        fareRuleTab: function(e) {
            var $target = "LI" === e.target.nodeName ? $(e.target) : $(e.target).parents("li"),
                $tabDetail = $target.parents(".fareRulesDiv").find(".fareRuleTabs"),
                activeEl = "." + $target.attr("data-target");
            $target.addClass("active").children().removeClass("active").addClass("active"), $target.siblings().removeClass("active").children().removeClass("active"), $tabDetail.children().removeClass("active").addClass("dispnon"), $tabDetail.find(activeEl).addClass("active").removeClass("dispnon")
        },
        fltRetDetailsTab: function(e) {
            var el = $(e.currentTarget);
            return this.visiblefltRetDet ? this.visiblefltRetDet[0] === el[0] ? (this.hideFltDetails(el, "return"), void(this.visiblefltRetDet = null)) : (this.hideFltDetails(this.visiblefltRetDet, "return"), this.showFltDetails(el, "return"), void(this.visiblefltRetDet = el)) : (this.showFltDetails(el, "return"), void(this.visiblefltRetDet = el))
        },
        flightDetailsTab: function(e) {
            var el = $(e.currentTarget);
            return this.visibleFlightDetail ? this.visibleFlightDetail[0] === el[0] ? (this.hideFltDetails(el, "onward"), void(this.visibleFlightDetail = null)) : (this.hideFltDetails(this.visibleFlightDetail, "onward"), this.showFltDetails(el, "onward"), void(this.visibleFlightDetail = el)) : (this.showFltDetails(el, "onward"), void(this.visibleFlightDetail = el))
        },
        showFltDetails: function(el, fltype) {
            "onward" == fltype ? el.parents(".result").find(".detTab li.flightDetails:not(.active)").trigger("click") : el.parents(".result").find(".detTab li.retflightDetails:not(.active)").trigger("click");
            var flightTabs = el.parents(".result").find(".detTab");
            flightTabs.toggle(), el.addClass("fltDetState"), el.find("i").removeClass("listIcon").addClass("openState")
        },
        hideFltDetails: function(el, fltype) {
            "onward" == fltype ? el.parents(".result").find(".detTab li.flightDetails:not(.active)").trigger("click") : el.parents(".result").find(".detTab li.retflightDetails:not(.active)").trigger("click");
            var flightTabs = el.parents(".result").find(".detTab");
            flightTabs.toggle(), el.removeClass("fltDetState"), el.find("i").addClass("listIcon").removeClass("openState")
        },
        flightCloseState: function() {
            $(".fltDetTab.fltDetState").trigger("click")
        },
        retflightCloseState: function() {
            $(".fltRetDetTab.fltDetState").trigger("click")
        },
        closeFareTrends: function(e) {
            var el = $(e.currentTarget);
            el.parents(".popover").addClass("u_invisible"), e.stopPropagation()
        },
        showFareTrends: function(e) {
            var $el = $(e.currentTarget),
                itinKey = $el.parents(".result").attr("data-key"),
                params = {};
            params.itinKey = itinKey;
            var $chartEle = $el.find(".ft-chart"),
                $popover = $el.find(".popover.ft-popover");
            $.subscribe("flight/fare-trend/", function(e, data) {
                if (data.json.response.err) alert("In-sufficient Data");
                else {
                    var chartData = {};
                    chartData.labels = data.json.xAxis, chartData.series = [], chartData.series[0] = data.json.fares;
                    var lowestPriceIndex = data.json.fares[data.json.lowestPriceIndex],
                        chartOpts = {};
                    chartOpts.low = lowestPriceIndex, chartOpts.showArea = !0, $popover.addClass("u_invisibility"), $popover.removeClass("u_invisible"), new Chartist.Line($chartEle.get(0), chartData, chartOpts), setTimeout(function() {
                        $popover.height();
                        $popover.css({
                            "margin-top": $el.height() - 10,
                            "margin-left": -($popover.width() - $el.width())
                        }), $popover.removeClass("u_invisibility")
                    }, 300)
                }
                $.unsubscribe("flight/fare-trend/")
            }), $.publish("AJAX_UTIL/asyncCall", {
                servlet: JS_UTIL.addAjaxSystemParams("/apiv2/flight/fare-trend/", {
                    jsonData: !0,
                    addAuthToken: !0
                }).replace(/^\//, ""),
                success: {
                    handler: "flight/fare-trend/"
                },
                params: JSON.stringify(params),
                type: "POST",
                dataType: "json",
                timeout: 3e4
            })
        },
        updateItineraryKey: function(e) {
            var $target = $(e.target),
                isOnward = $target.parents(".onwardResults").length > 0,
                isReturn = $target.parents(".returnResults").length > 0,
                selectorString = isOnward ? ".onwardResults .selected" : isReturn ? ".returnResults .selected" : "",
                $result = $target.parents(".result"),
                $resultSet = $target.parents(".resultSet"),
                key = $target.parents(".result").data("key");
            if ($resultSet.find(selectorString).removeClass("selected").find(".bookCTA").html(languageBundle.select_flight_results), $result.addClass("selected").find(".bookCTA").html(languageBundle.selected_flight_results), isOnward) {
                this.form.onwardKey.value = key;
                var journey = this.getJourneyDetails(key, "ONWARD");
                this.updateBookPanel(journey, "onward"), window.CT && (CT.tempHolder.fltDomOwObj = journey)
            } else if (isReturn) {
                this.form.returnKey.value = key;
                var journey = this.getJourneyDetails(key, "RETURN");
                this.updateBookPanel(journey, "return"), window.CT && (CT.tempHolder.fltDomRtObj = journey)
            } else this.form.onwardKey.value = key;
            if (window.CT && (!this.options.isReturn || !this.options.isDomestic)) {
                var owFlightJson = this.getJourneyDetails(key, "ONWARD");
                CT.flights.flightSelected(0, this.searchList.searchQuery, owFlightJson, {})
            }
            this.options.isReturn && this.options.isDomestic || (this.form.returnKey.value = "", this.book())
        },
        book: function() {
            if (this.options.isReturn && this.options.isDomestic) {
                var $onwardSelection = $(".onwardResults > .result.selected"),
                    $returnSelection = $(".returnResults > .result.selected");
                if (this.options.isDomesticMulticity && (!$onwardSelection.length || !$returnSelection.length)) return void alert(languageBundle.SELECT_ANOTHER);
                if (0 === $onwardSelection.length) return void alert(languageBundle.SELECT_ONWARD);
                if (0 === $returnSelection.length) return void alert(languageBundle.SELECT_RETURN);
                var arrTime = parseFloat($onwardSelection.data("arr")) || 0,
                    depTime = parseFloat($returnSelection.data("dep")) || 0;
                if (depTime - arrTime < 54e5) return void alert(languageBundle.RETURN_BEFORE_90);
                if (this.form.onwardKey.value == -1) return !1;
                if (this.form.returnKey.value == -1) return !1;
                window.CT && CT.flights.flightSelected(1, this.searchList.searchQuery, CT.tempHolder.fltDomOwObj, CT.tempHolder.fltDomOwObj)
            }
            var waitBox = $(".waitBox");
            waitBox.children(".homepageFlightInfo").addClass("flightInfo").removeClass("homepageFlightInfo"), this.options.isReturn && waitBox.find(".dates .return").css("display", "inline-block"), MODAL_PANEL.show(waitBox, {
                closeBody: !1
            }), this.form.submit()
        },
        updateBookPanel: function(journey, jType) {
            var $bookPanel = $(".bookPanelContainer");
            $bookPanel.find("." + jType + "Flight").html(this.domesticBookPanel({
                journey: journey,
                options: this.options,
                jType: jType
            })), this.selectedJourneys[jType] = journey;
            var price = 0;
            this.selectedJourneys.onward && (price += this.selectedJourneys.onward.price), this.selectedJourneys["return"] && (price += this.selectedJourneys["return"].price);
            var isDiscounted = !1,
                discountedPrice = price;
            if (this.selectedJourneys.onward && this.selectedJourneys["return"]) {
                var specialReturn = this.getSpecialReturn();
                discountedPrice = price, specialReturn.price && specialReturn.price < price && (discountedPrice = specialReturn.price, isDiscounted = !0, this.form.onwardKey.value = specialReturn.journey[0].key, this.form.returnKey.value = 2 === specialReturn.journey.length ? specialReturn.journey[1].key : "")
            }
            $bookPanel.find(".bookContainer .currency").html(this.discountTemplate({
                isDiscounted: isDiscounted,
                normalPrice: price,
                totalPrice: discountedPrice,
                options: this.options
            })), $bookPanel.show()
        },
        getMatch: function(inArray, flightKey) {
            return _.find(inArray, function(o) {
                return o.flightKey === flightKey
            })
        },
        getSpecialReturn: function() {
            var onwardJourney, returnJourney, combinedJourney, onwardCarrierCode = this.selectedJourneys.onward.airlineCd,
                returnCarrierCode = this.selectedJourneys["return"].airlineCd,
                onwardKey = this.selectedJourneys.onward.flightKey ? this.selectedJourneys.onward.flightKey : this.selectedJourneys.onward.fltNum.join("#") + "#",
                returnKey = this.selectedJourneys["return"].flightKey ? this.selectedJourneys["return"].flightKey : this.selectedJourneys["return"].fltNum.join("#") + "#",
                retVal = {};
            if (onwardCarrierCode === returnCarrierCode && this.specialReturns[onwardCarrierCode])
                if (_.isEmpty(this.specialReturns[onwardCarrierCode].combinedJourneys)) {
                    var onwardJourney = this.getMatch(this.specialReturns[onwardCarrierCode].onwardJourneys, onwardKey),
                        returnJourney = this.getMatch(this.specialReturns[returnCarrierCode].returnJourneys, returnKey);
                    onwardJourney && returnJourney && (retVal = {
                        journey: [onwardJourney, returnJourney],
                        price: onwardJourney.fare + returnJourney.fare
                    })
                } else {
                    var combinedFlightKey = onwardKey + returnKey,
                        combinedJourney = this.getMatch(this.specialReturns[onwardCarrierCode].combinedJourneys, combinedFlightKey);
                    retVal = {
                        journey: [combinedJourney],
                        price: combinedJourney && combinedJourney.fare ? combinedJourney.fare : 0
                    }
                }
            return retVal
        },
        showEmailModal: function(e) {
            $target = $(e.target), $target.hasClass("active") ? (MODAL_PANEL.show($(".emailFareDiv"), {
                closeButton: !0
            }), $(".modalPanelContainer").find(".emailFareDiv").addClass("currentEmailFareModal"), $(".currentEmailFareModal").find(".fare_email_subject").val(this.emailSubject)) : alert(languageBundle.Email_Fare_Select_One_Flight_MSG)
        },
        selectEmail: function(e) {
            var emailText, $target = $(e.target),
                $el = $target.hasClass("addToEmail") ? $target : $target.parent(),
                $emailTo = $(".emailFares"),
                fareCount = parseInt($emailTo.attr("data-count"), 10),
                fareCountText = "";
            $el.hasClass("added") ? ($el.removeClass("added"), emailText = languageBundle.Add_to_Email_List, fareCount -= 1) : ($el.addClass("added"), emailText = languageBundle.Added_to_Email_List, fareCount += 1), fareCountText = fareCount ? fareCount + "" : "", fareCountText ? $emailTo.addClass("active").attr("data-count", fareCount).children(".cnt").html(fareCountText) : $emailTo.removeClass("active").attr("data-count", fareCount).children(".cnt").html(fareCountText), this.options.isDomestic && this.options.isReturn ? $el.addClass("selected").children(".text").html(languageBundle.Email) : $el.addClass("selected").children(".text").html(emailText)
        },
        toggleDropdown: function(el) {
            var $target = $(el.target),
                $dropDownTarget = $target.hasClass("setSort") ? $target : $target.parent(".setSort"),
                dropDown = ".dropDown";
            return $dropDownTarget.siblings(dropDown).toggle(), !1
        },
        getJourneyDetails: function(key, jType) {
            var journeys = "ONWARD" === jType ? this.toBeRendered.onwardJourneys : this.toBeRendered.returnJourneys;
            return !this.options.isDomestic && this.options.isReturn && (journeys = this.toBeRendered.combinedJourneys), _.find(journeys, function(o) {
                return o.key.indexOf(key) > -1
            })
        },
        showFareRulesDetails: function($target, journey, key, jType, e) {
            var _this = this,
                ele = e,
                mfkey = key.replace(/\s/gi, "");
            $.subscribe("flight/fareRule/" + mfkey + jType, function(e, data) {
                var flightSegments = [];
                _.each(data.json.fareRules, function(json) {
                    _.isArray(json.segmentKeys) && json.segmentKeys.length && _.each(json.segmentKeys, function(json) {
                        var startIndex = json,
                            flightsegment = {};
                        flightsegment.depDetail = journey.flights[startIndex].depDetail.code, flightsegment.arrDetail = journey.flights[startIndex].arrDetail.code, flightsegment.key = journey.flights[startIndex].key, flightSegments.push(flightsegment)
                    })
                }), $target.parents(".result").find(ele).html(_this.resultFareRulesTemplate({
                    src: _this.query.sectorInfos[0].src.code,
                    dest: _this.query.sectorInfos[0].dest.code,
                    dataRule: data.json,
                    flightSegments: flightSegments,
                    flightkey: 0
                })), $.unsubscribe("flight/fareRule/" + mfkey + jType)
            }), $.publish("AJAX_UTIL/asyncCall", {
                servlet: JS_UTIL.addAjaxSystemParams("/apiv2/flight/fare-rule/" + key + "/" + jType, {
                    jsonData: !0,
                    addAuthToken: !0
                }).replace(/^\//, ""),
                success: {
                    handler: "flight/fareRule/" + mfkey + jType
                },
                type: "GET",
                dataType: "json",
                timeout: 3e4
            })
        },
        showFlightOptionsDetails: function($target, journey, clsDiv, template) {
            $target.parents(".result").find(clsDiv).html(template({
                journey: journey,
                options: this.options
            }))
        },
        showDetails: function(e, ele) {
            var $target = $(ele.target),
                jType = $target.parents(".returnResults").length ? "RETURN" : "ONWARD",
                $parent = $(ele.target).parents(".detTab");
            $(ele.target).hasClass("active") ? $(ele.target).removeClass("active") : ($(ele.target).addClass("active"), $parent.find(".detDiv").show(), $parent.find(".det-div").hide(), $parent.find(e).toggle()), $(".detLinks li.active").not(ele.target).removeClass("active");
            var key = $target.parents(".result").data("key"),
                journey = this.getJourneyDetails(key, jType);
            switch (e) {
                case ".onwFltDetDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultDetailsTemplate);
                    break;
                case ".onwFareDetDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultFareTemplate);
                    break;
                case ".onwBagInfoDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultBaggageTemplate);
                    break;
                case ".onwFareRulesDiv":
                    this.showFareRulesDetails($target, journey, key, jType, e)
            }
        },
        rtShowDetails: function(e, ele) {
            var $target = $(ele.target),
                jType = $target.parents(".returnResults").length ? "RETURN" : "ONWARD",
                $parent = $(ele.target).parents(".detTab");
            $(ele.target).hasClass("active") ? $(ele.target).removeClass("active") : ($(ele.target).addClass("active"), $parent.find(".detDiv").show(), $parent.find(".det-div").hide(), $parent.find(e).toggle()), $(".retdetLinks li.active").not(ele.target).removeClass("active");
            var key = $target.parents(".result").data("key"),
                journey = this.getJourneyDetails(key, jType);
            switch (e) {
                case ".retfltDetDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultDetailsTemplate);
                    break;
                case ".retfareDetDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultFareTemplate);
                    break;
                case ".retbagInfoDiv":
                    this.showFlightOptionsDetails($target, journey, e, this.resultBaggageTemplate);
                    break;
                case ".retfareRulesDiv":
                    this.showFareRulesDetails($target, journey, key, jType, e)
            }
        },
        showModifyCTA: function(evt) {
            var _this = this,
                $panel = $(".modifySearchBox");
            _this.options.isMultiCity && _.forEach(_this.query.sectorInfos, function(o, index) {
                $panel.find("#multi-city-label-" + index).css("display", "inline"), 4 === index && $panel.find(".add-flight-btn").hide(), index > 1 && ($panel.find(".flightSearchForm .panel-head .close").hide(), $panel.find(".flightSearchForm .panel-head label:eq(" + index + ") .close").css("display", "inline-block"))
            })
        },
        sortJourneys: function() {
            var onwardSortBy = this.sortBy.onward.name,
                onwardType = this.sortBy.onward.type,
                returnSortBy = this.sortBy["return"].name,
                returnType = this.sortBy["return"].type;
            this.toBeRendered.combinedJourneys && (this.toBeRendered.combinedJourneys = _.orderBy(this.toBeRendered.combinedJourneys, onwardSortBy, onwardType)), this.toBeRendered.onwardJourneys && (this.toBeRendered.onwardJourneys = _.orderBy(this.toBeRendered.onwardJourneys, onwardSortBy, onwardType)), this.toBeRendered.returnJourneys && (this.toBeRendered.returnJourneys = _.orderBy(this.toBeRendered.returnJourneys, returnSortBy, returnType))
        },
        setPriceRange: function(price) {
            this.minPrice = price < this.minPrice ? price : this.minPrice, this.maxPrice = price > this.maxPrice ? price : this.maxPrice
        },
        sortItemsForSplit: function(type, el) {
            var $target = $(el.target),
                $sortTarget = ($target.parents(".dropDowns"), "DIV" === $target.prop("tagName") ? $target : $target.parent("div"));
            this.sortBy[type].name = $sortTarget.attr("data-sortType"), this.sortBy[type].type = $sortTarget.attr("data-sortOrder"), this.sortByTarget = $target.parents(".price").find(".setSort").hasClass("setSortOnward") ? ".setSortOnward" : ".setSortReturn", this.sortByHTML = $sortTarget.html(), $.publish("flights/stateChange", {
                journeys: this.toBeRendered
            })
        },
        sortItems: function(e) {
            var $target = $(e.target);
            $target.hasClass("asc") ? ($target.removeClass("asc").addClass("desc"), this.sortBy.onward.type = "desc") : $target.hasClass("desc") ? ($target.removeClass("desc").addClass("asc"), this.sortBy.onward.type = "asc") : ($target.addClass("asc"), this.sortBy.onward.type = "asc"), this.sortBy.onward.name = $target.data("normaltype").toLowerCase(), $.publish("flights/stateChange", {
                journeys: this.toBeRendered
            })
        },
        switchToPrevDay: function(evt) {
            var $target = $(evt.target),
                isTargetOnward = !this.options.isReturn || !this.options.isDomestic || $target.parents("div").eq(1).hasClass("onwardResults"),
                $direction = isTargetOnward ? $("input#departure") : $("input#return"),
                journeyDate = isTargetOnward ? via.date.strToDateObj(this.query.sectorInfos[0].date) : via.date.strToDateObj(this.query.sectorInfos[1].date),
                prevDate = via.date.addDays(journeyDate, -1);
            return !isTargetOnward && prevDate < via.date.strToDateObj(this.query.sectorInfos[0].date) ? void alert(languageBundle.RETURN_BEFORE_ONWARD) : ($direction.attr("data-date", DATE_FORMATTER.format(prevDate, "mm/dd/yyyy").date), $direction.val(DATE_FORMATTER.format(prevDate, "ddd, mmm dd yyyy").date), void $("#search-flight-btn").trigger("click"))
        },
        switchToNextDay: function(evt) {
            var $target = $(evt.target),
                isReturnJourney = this.options.isReturn && this.options.isDomestic,
                isTargetOnward = !isReturnJourney || $target.parents("div").eq(1).hasClass("onwardResults"),
                $direction = isTargetOnward ? $("input#departure") : $("input#return"),
                journeyDate = isTargetOnward ? via.date.strToDateObj(this.query.sectorInfos[0].date) : via.date.strToDateObj(this.query.sectorInfos[1].date),
                nextDate = via.date.addDays(journeyDate, 1);
            return isTargetOnward && isReturnJourney && nextDate > via.date.strToDateObj(this.query.sectorInfos[1].date) ? void alert(languageBundle.ONWARD_AFTER_RETURN) : ($direction.attr("data-date", DATE_FORMATTER.format(nextDate, "mm/dd/yyyy").date), $direction.val(DATE_FORMATTER.format(nextDate, "ddd, mmm dd yyyy").date), void $("#search-flight-btn").trigger("click"))
        },
        subscriptions: function() {
            var intervalId, _this = this,
                sortAndRender = function() {
                    _this.sortJourneys(), _this.render()
                },
                throttledRender = _.throttle(sortAndRender, 500),
                setRequestStatus = function() {
                    _this.requestCompleteStatus = _this.isAjaxCompleted, _this.requestCompleteStatus && (clearInterval(intervalId), _.forEach(_this.specialReturns, function(carrierObject, key) {
                        var oOnward = carrierObject.onwardJourneys,
                            oReturn = carrierObject.returnJourneys,
                            oCombined = carrierObject.combinedJourneys;
                        if (oOnward && oOnward.length) {
                            var currentWidget = _this.widget.cheapestFlights[key];
                            _.isUndefined(currentWidget) || (currentWidget.price = oOnward[0].fare, oReturn && oReturn[0].fare && (currentWidget.price += oReturn[0].fare))
                        } else {
                            var currentWidget = _this.widget.cheapestFlights[key];
                            !_.isUndefined(currentWidget) && oCombined && (currentWidget.price = oCombined[0].fare)
                        }
                    }), _this.showCheapestFlightBox && $.publish("flights/widget/init", _this.widget))
                },
                syncAjaxes = function() {
                    intervalId = setInterval(setRequestStatus, 500)
                };
            $.subscribe("flights/airlinePrices", this.processAirlineResponse.bind(this)), $.subscribe("flights/airlinePricesReturn", this.processSpecialReturnResponse.bind(this)), $.subscribe("flights/stateChange", function(e, data) {
                _this.toBeRendered = data.journeys, _this.sortJourneys(), _this.render(), $.publish("PAGE_LOADER/end", {})
            }), $.subscribe("flights/resultsFiltered", this.updateFilter.bind(this)), $.subscribe("flights/dataReceived", function(e, data) {
                $(".loadPercent").text(data.progress + "%"), $(".progressBar").css("width", data.progress + "%"), 100 === data.progress && ($(".progressBar").css("opacity", "0"), $(".progressBarContainer").hide(), _this.processFilterInput())
            }), $.subscribe("flights/noResultsFound", function(e, data) {
                $("#flightSearchResults > .container:eq(0)").replaceWith(_this.noResultsFoundTemplate({
                    noResultFound: "NO_FLIGHT_FOUND_MSG",
                    noResultFoundSgt: "NO_FLIGHT_FOUND_SGST"
                }))
            }), $.subscribe("flights/pushToWaitQueue", throttledRender), $.subscribe("flights/syncSpecialReturns", syncAjaxes), $.subscribe("flights/resetBookPanelContainer", function(e, data) {
                _this.selectedJourneys.onward = null, _this.selectedJourneys["return"] = null
            })
        },
        render: function(scrollFlag) {
            function sliceData(data) {
                if (!_.isUndefined(data) && data.length) {
                    var sliceStart = _this.scrollinationConfig.renderedIndex,
                        sliceEnd = Math.min(_this.scrollinationConfig.renderedIndex + _this.scrollinationConfig.scrollLength, data.length);
                    return data.slice(sliceStart, sliceEnd)
                }
                return []
            }
            var isRenderable = this.toBeRendered && this.toBeRendered.onwardJourneys && this.toBeRendered.returnJourneys && this.toBeRendered.combinedJourneys,
                _this = this;
            if (this.scrollinationConfig.hasMoreItems = isRenderable && this.scrollinationConfig.renderedIndex < Math.max(this.toBeRendered.onwardJourneys.length, this.toBeRendered.returnJourneys.length, this.toBeRendered.combinedJourneys.length), scrollFlag || this.scrollinationConfig.resetSelf(), isRenderable && this.scrollinationConfig.hasMoreItems) {
                var renderFn, renderData = JSON.parse(JSON.stringify(this.toBeRendered));
                renderFn = scrollFlag ? $.fn.append : $.fn.html, renderData.onwardJourneys = sliceData(renderData.onwardJourneys), renderData.returnJourneys = sliceData(renderData.returnJourneys), renderData.combinedJourneys = sliceData(renderData.combinedJourneys), scrollFlag || renderFn.call(this.$container, this.template({
                    resultsOptsTemplate: this.resultsOptsTemplate,
                    containerTemplate: this.resultContainerTemplate,
                    data: renderData,
                    resultTemplate: this.options.isReturn && this.options.isDomestic ? this.resultSplitTemplate : this.resultTemplate,
                    priceTemplate: this.resultPriceTemplate,
                    options: this.options,
                    resultTabsTemplate: this.resultTabsTemplate,
                    optsTemplate: this.resultOptsTemplate,
                    sortTemplate: this.sortTemplate,
                    options: this.options,
                    sortBy: this.sortBy,
                    src: this.query.sectorInfos[0].src.code,
                    dest: this.query.sectorInfos[0].dest.code,
                    dateChangeRange: "",
                    cancellationRange: "",
                    firstRender: !scrollFlag,
                    lengths: {
                        onwardJourneys: this.toBeRendered.onwardJourneys.length,
                        returnJourneys: this.toBeRendered.returnJourneys.length,
                        combinedJourneys: this.toBeRendered.combinedJourneys.length
                    }
                }));
                var oncombResltCont = this.resultContainerTemplate({
                    data: renderData,
                    resultTemplate: this.options.isReturn && this.options.isDomestic ? this.resultSplitTemplate : this.resultTemplate,
                    priceTemplate: this.resultPriceTemplate,
                    options: this.options,
                    resultTabsTemplate: this.resultTabsTemplate,
                    optsTemplate: this.resultOptsTemplate,
                    isReturn: !1
                });
                if (this.options.isReturn && this.options.isDomestic && scrollFlag && (this.$container.find(".onwardResults").append(oncombResltCont), this.$container.find(".returnResults").append(this.resultContainerTemplate({
                        data: renderData,
                        resultTemplate: this.options.isReturn && this.options.isDomestic ? this.resultSplitTemplate : this.resultTemplate,
                        priceTemplate: this.resultPriceTemplate,
                        options: this.options,
                        resultTabsTemplate: this.resultTabsTemplate,
                        optsTemplate: this.resultOptsTemplate,
                        isReturn: !0
                    }))), scrollFlag && this.$container.find(".oneway").append(oncombResltCont), this.options.isCombined && scrollFlag && this.$container.append(oncombResltCont), this.isAjaxCompleted && !$("body").hasClass("content-loaded") && $("body").addClass("content-loaded"), this.isAjaxCompleted && !scrollFlag && "function" == typeof load_gfeed_url && load_gfeed_url(), this.isAjaxCompleted && window.CT) {
                    var isDomestic = this.query.domestic,
                        totResultCountOW = this.toBeRendered.onwardJourneys.length > 0 ? this.toBeRendered.onwardJourneys.length : this.toBeRendered.combinedJourneys.length,
                        totResultCountRT = this.toBeRendered.returnJourneys.length;
                    this.toBeRendered.returnJourneys.length ? CT.flights.srpPage(this.query, isDomestic, totResultCountOW, totResultCountRT) : CT.flights.srpPage(this.query, isDomestic, totResultCountOW, totResultCountRT)
                }
                this.scrollinationConfig.renderedIndex += this.scrollinationConfig.scrollLength
            } else this.isAjaxCompleted && 0 === this.toBeRendered.onwardJourneys.length === this.toBeRendered.returnJourneys.length === this.toBeRendered.combinedJourneys.length && this.$container.html(this.noResultsFilteredTemplate({}));
            scrollFlag || ($(".bookPanelContainer").html(this.domesticBookPanelReset({})).hide(), this.sortByTarget && this.sortByHTML && $(".price").find(this.sortByTarget).html(this.sortByHTML))
        },
        processAirlineResponse: function(e, data) {
            this.airlineCount++, this.airlineCount == this.searchList.searchList.length && (this.isAjaxCompleted = !0), data.json.onwardJourneys instanceof Array && (this.journeys.onwardJourneys = _.concat(this.journeys.onwardJourneys, data.json.onwardJourneys)), "undefined" != typeof data.json.returnJourneys && data.json.returnJourneys instanceof Array && (this.journeys.returnJourneys = _.concat(this.journeys.returnJourneys, data.json.returnJourneys)), data.json.isCombined && data.json.combinedJourneys instanceof Array && (this.journeys.combinedJourneys = _.concat(this.journeys.combinedJourneys, data.json.combinedJourneys)), this.modifyJson(), this.toBeRendered = this.journeys, (this.journeys.onwardJourneys.length || this.journeys.returnJourneys.length || this.journeys.combinedJourneys.length) && (!this.isAjaxCompleted || this.options.isDomestic && this.options.isReturn || !this.showCheapestFlightBox || $.publish("flights/widget/init", this.widget),
                $.publish("flights/pushToWaitQueue", {}), $.publish("flights/showFilters", {
                    isDomesticReturn: this.options.isDomestic && this.options.isReturn,
                    isCombined: this.journeys.combinedJourneys.length > 0,
                    stopSet: this.stopSet,
                    airlineSet: this.airlineSet,
                    minPrice: this.minPrice,
                    maxPrice: this.maxPrice,
                    fromCity: this.query.sectorInfos[0].src.city,
                    toCity: this.query.sectorInfos[0].dest.city,
                    currency: this.options.currency
                }), $.publish("flights/dataReceived", {
                    progress: parseInt(this.airlineCount / this.searchList.searchList.length * 100, 10)
                }), this.dataReceivedAtleastOnce = !0), this.isAjaxCompleted && !this.dataReceivedAtleastOnce && $.publish("flights/noResultsFound", {})
        },
        processSpecialReturnResponse: function(e, data) {
            var json = data.json;
            this.specialReturnsReceived++, json.onwardJourneys && json.onwardJourneys.length && (this.specialReturns[json.onwardJourneys[0].carrier] = {}, this.specialReturns[json.onwardJourneys[0].carrier].onwardJourneys = json.onwardJourneys), json.returnJourneys && json.returnJourneys.length && (this.specialReturns[json.returnJourneys[0].carrier] = this.specialReturns[json.returnJourneys[0].carrier] || {}, this.specialReturns[json.returnJourneys[0].carrier].returnJourneys = json.returnJourneys), json.combinedJourneys && json.combinedJourneys.length && (this.specialReturns[json.combinedJourneys[0].carrier] = {}, this.specialReturns[json.combinedJourneys[0].carrier].combinedJourneys = json.combinedJourneys), this.specialReturnsReceived === this.discountedReturns && $.publish("flights/syncSpecialReturns", {})
        },
        updateFilter: function(e, data) {
            var toFilter, filteredJourneys = JSON.parse(JSON.stringify(this.journeys)),
                criteria = Object.keys(data);
            this.filterQuery = data, toFilter = filteredJourneys.combinedJourneys.length ? "combinedJourneys" : "onwardJourneys", this.filterResults(filteredJourneys, toFilter, data, criteria), "onwardJourneys" === toFilter && filteredJourneys.returnJourneys.length && (toFilter = "returnJourneys", this.filterResults(filteredJourneys, toFilter, data, criteria)), this.toBeRendered = filteredJourneys, this.sortBy && filteredJourneys[toFilter].length ? $.publish("flights/stateChange", {
                journeys: this.toBeRendered
            }) : this.render()
        },
        processFilterInput: function() {
            $(".filterResult").click(function() {
                $("#resultFilter").slideToggle("slow"), $(".arrowTip").slideToggle(), $(".filterResult").toggleClass("filterToggle")
            }), $(".filterResult").click()
        },
        journeyInfo: function(journey, type) {
            function addFltInfoJourney(flight, _type) {
                journey[_type].airline.push(flight.carrier.code), journey[_type].fltNum.push(flight.carrier.code + "-" + flight.flightNo), journey[_type].fltRoute.push(flight.depDetail.code), journey[_type].fltRouteName.push(flight.depDetail.name), journey[_type].fltCarrierName.push(flight.carrier.name), flight.eqpType && (journey[_type].isConnectingType = flight.eqpType), journey[_type].stops = journey[_type].stops + 1 + (flight.stops ? flight.stops : 0), journey[_type].journeyTime = journey[_type].duration = journey.duration, journey[_type].nextDayArr = journey.flights.nextDayArr, journey.fltNum = journey[_type].fltNum, journey.stops = journey[_type].stops, journey.baggage = journey.baggage || !_.isUndefined(flight.amenities.baggage), journey.amenities = journey.amenities || flight.amenities.meal
            }

            function createCheapestFlightData(code, name) {
                _this.widget.cheapestFlights[code] || (_this.widget.cheapestFlights[code] = {}), (!_this.widget.cheapestFlights[code].price || _this.widget.cheapestFlights[code].price > journey.fares.totalFare.total.amount) && (_this.widget.cheapestFlights[code].price = journey.fares.totalFare.total.amount, _this.widget.cheapestFlights[code].code = code, _this.widget.cheapestFlights[code].name = name, _this.widget.cheapestFlights[code].flightKey = code + "-" + name + "#")
            }

            function createFastestFlightData(code) {
                _this.widget.fastestFlights[code] || (_this.widget.fastestFlights[code] = {}), (!_this.widget.fastestFlights[code].duration || _this.widget.fastestFlights[code].duration > journey.journeyTime) && (_this.widget.fastestFlights[code].price = journey.fares.totalFare.total.amount, _this.widget.fastestFlights[code].code = code, _this.widget.fastestFlights[code].duration = journey.journeyTime)
            }
            var combinedArrivalDate, combinedDepartDate, _this = this,
                oFltInfo = {
                    airline: [],
                    fltNum: [],
                    fltRoute: [],
                    fltRouteName: [],
                    fltCarrierName: [],
                    stops: 0
                },
                arrivalDate = via.date.strToDateObj(journey.flights[journey.flights.length - 1].arrDetail.time),
                departDate = via.date.strToDateObj(journey.flights[0].depDetail.time);
            "combined" === type ? (journey.onward = JSON.parse(JSON.stringify(oFltInfo)), journey["return"] = JSON.parse(JSON.stringify(oFltInfo))) : journey[type] = JSON.parse(JSON.stringify(oFltInfo)), journey.journeyTime = journey.duration = 0, journey.flights.nextDayArr = !1, journey.returnFltIndex = journey.flights.length;
            var status = !0;
            _.forEach(journey.flights, function(flight, fltI) {
                "combined" === type ? flight.isReturn ? (status ? (journey.returnFltIndex = fltI, status = !1, journey.journeyTime = journey.duration = 0, journey.journeyTime = journey.duration += (flight.flyTime || 0) + (flight.layover || 0), journey.flights.nextDayArr = !1, journey.flights.nextDayArr = journey.flights.nextDayArr || flight.nextDayArr) : (journey.journeyTime = journey.duration += (flight.flyTime || 0) + (flight.layover || 0), journey.flights.nextDayArr = journey.flights.nextDayArr || flight.nextDayArr), addFltInfoJourney(flight, "return")) : (journey.journeyTime = journey.duration += (flight.flyTime || 0) + (flight.layover || 0), journey.flights.nextDayArr = journey.flights.nextDayArr || flight.nextDayArr, addFltInfoJourney(flight, "onward")) : (journey.journeyTime = journey.duration += (flight.flyTime || 0) + (flight.layover || 0), journey.flights.nextDayArr = journey.flights.nextDayArr || flight.nextDayArr, addFltInfoJourney(flight, type))
            }), createCheapestFlightData(journey.flights[0].carrier.code, journey.flights[0].carrier.name), createFastestFlightData(journey.flights[0].carrier.code), journey.stops = journey.stops - 1, journey.airlines = journey.flights[0].carrier.name, journey.airlineCd = journey.flights[0].carrier.code, journey.arrival = arrivalDate.getTime(), journey.depart = departDate.getTime(), journey.arrivalFilter = arrivalDate.getHours(), journey.departFilter = departDate.getHours(), journey.price = journey.fares.totalFare.total.amount, "combined" === type && (arrivalDate = via.date.strToDateObj(journey.flights[journey.returnFltIndex - 1].arrDetail.time), combinedArrivalDate = via.date.strToDateObj(journey.flights[journey.flights.length - 1].arrDetail.time), combinedDepartDate = via.date.strToDateObj(journey.flights[journey.returnFltIndex].depDetail.time), journey.onward.fltRoute.push(journey.flights[journey.returnFltIndex - 1].arrDetail.code), journey.onward.fltRouteName.push(journey.flights[journey.returnFltIndex - 1].arrDetail.name), journey["return"].fltRoute.push(journey.flights[0].depDetail.code), journey["return"].fltRouteName.push(journey.flights[0].depDetail.name), journey.arrivalFilter = [], journey.departFilter = [], journey.departFilter.push(departDate.getHours()), journey.departFilter.push(combinedDepartDate.getHours()), journey.arrivalFilter.push(arrivalDate.getHours()), journey.arrivalFilter.push(combinedArrivalDate.getHours()), journey.arrival = arrivalDate.getTime(), journey.journeyTime = journey.duration = journey.onward.duration, journey.stops = Math.max(journey.onward.stops, journey["return"].stops) - 1), "onward" === type && (journey.onward.fltRoute.push(journey.flights[journey.flights.length - 1].arrDetail.code), journey.onward.fltRouteName.push(journey.flights[journey.flights.length - 1].arrDetail.name)), "return" === type && (journey["return"].fltRoute.push(journey.flights[journey.flights.length - 1].arrDetail.code), journey["return"].fltRouteName.push(journey.flights[journey.flights.length - 1].arrDetail.name)), this.setPriceRange(journey.price)
        },
        modifyJson: function() {
            function addToAirlineSet(airline, code) {
                function boundHasAirline(toPush) {
                    return function(airline) {
                        return toPush.code === airline.code
                    }
                }

                function pushIfUnique(set, oPush, fn) {
                    0 === set.length ? set.push(oPush) : set.some(fn) || set.push(oPush)
                }
                var oPush = {
                    name: airline,
                    code: code
                };
                oPush && pushIfUnique(airlineSet, oPush, boundHasAirline(oPush))
            }

            function addToStopSet(stop) {
                stop > 2 && stopSet.indexOf(3) < 0 ? stopSet.push(3) : stop < 3 && stopSet.indexOf(stop) < 0 && stopSet.push(stop)
            }
            var _this = this,
                airlineSet = [],
                stopSet = [];
            _.forEach(this.journeys.onwardJourneys, function(journey, key) {
                _this.journeyInfo(journey, "onward"), _.isUndefined(journey.airlineCd) || addToAirlineSet(journey.airlines, journey.airlineCd), _.isUndefined(journey.stops) || addToStopSet(journey.stops)
            }), _.forEach(this.journeys.returnJourneys, function(journey, key) {
                _this.journeyInfo(journey, "return"), _.isUndefined(journey.airlineCd) || addToAirlineSet(journey.airlines, journey.airlineCd), _.isUndefined(journey.stops) || addToStopSet(journey.stops)
            }), _.forEach(this.journeys.combinedJourneys, function(journey, key) {
                _this.journeyInfo(journey, "combined"), _.isUndefined(journey.airlineCd) || addToAirlineSet(journey.airlines, journey.airlineCd), _.isUndefined(journey.stops) || addToStopSet(journey.stops)
            }), this.airlineSet = airlineSet, this.stopSet = stopSet
        },
        asyncTask: function() {
            var _this = this;
            0 == this.searchList.searchList.length ? $.publish("flights/noResultsFound", {}) : _.forEachRight(this.searchList.searchList, function(searchList, index) {
                var query = JSON.parse(JSON.stringify(_this.query));
                _.forEachRight(searchList.carriers, function(carrier, i) {
                    query.prefAirlines.push({
                        code: carrier.code
                    }), query.multiHop = searchList.isMultiHop;
                    var rtQuery = JSON.parse(JSON.stringify(_this.query));
                    rtQuery.prefAirlines.push({
                        code: carrier.code
                    }), searchList.allowDisc && (rtQuery.disc = searchList.allowDisc, _this.discountedReturns++, $.publish("AJAX_UTIL/asyncCall", {
                        servlet: JS_UTIL.addAjaxSystemParams("/apiv2/flight/rt-search", {
                            jsonData: !0,
                            addAuthToken: !0
                        }).replace(/^\//, ""),
                        params: JSON.stringify(rtQuery),
                        success: {
                            handler: "flights/airlinePricesReturn"
                        },
                        type: "POST",
                        dataType: "json",
                        timeout: 9e4
                    }))
                }), $.publish("AJAX_UTIL/asyncCall", {
                    servlet: JS_UTIL.addAjaxSystemParams("/apiv2/flight/search", {
                        jsonData: !0,
                        addAuthToken: !0
                    }).replace(/^\//, ""),
                    params: JSON.stringify(query),
                    success: {
                        handler: "flights/airlinePrices"
                    },
                    type: "POST",
                    dataType: "json",
                    timeout: 9e4
                })
            })
        },
        filterResults: function(oJourney, oJourneyKey, oData, oDataKeys) {
            _.isEmpty(oDataKeys) || ($.publish("flights/showResetFilters", {}), oJourney[oJourneyKey] = oJourney[oJourneyKey].filter(function(journey, i) {
                var retVal = !0;
                return _.forEach(oDataKeys, function(criterion) {
                    if ("times" === criterion) {
                        var isOnward = oJourneyKey.indexOf("onward") > -1,
                            isReturn = (oJourneyKey.indexOf("combined") > -1, oJourneyKey.indexOf("return") > -1),
                            direction = isOnward ? "O" : isReturn ? "R" : "";
                        if (direction) {
                            var departBoundFn = oData[criterion].filterFn(oData[criterion].timesList[direction + "D"]),
                                arrivalBoundFn = oData[criterion].filterFn(oData[criterion].timesList[direction + "A"]);
                            retVal = retVal && departBoundFn(journey.departFilter) && arrivalBoundFn(journey.arrivalFilter)
                        } else {
                            var onwardDepartFn = oData[criterion].filterFn(oData[criterion].timesList.OD),
                                onwardArrivalFn = oData[criterion].filterFn(oData[criterion].timesList.OA),
                                returnDepartFn = oData[criterion].filterFn(oData[criterion].timesList.RD),
                                returnArrivalFn = oData[criterion].filterFn(oData[criterion].timesList.RA);
                            retVal = retVal && onwardDepartFn(journey.departFilter[0]) && onwardArrivalFn(journey.arrivalFilter[0]) && returnDepartFn(journey.departFilter[1]) && returnArrivalFn(journey.arrivalFilter[1])
                        }
                    } else retVal = retVal && oData[criterion].filterFn(journey[criterion]);
                    return retVal
                }), retVal
            }))
        }
    }, {
        FlightsResults: FlightsResults
    }
}), via.define("via.flights", function() {
    function ResultFilter(criteria, options) {
        var defaults = {};
        this.options = $.extend(!0, defaults, options || {}), this.criteria = criteria || {}, this.partials = {}, this.initialize()
    }
    return ResultFilter.prototype = {
        initialize: function() {
            this.populateDefaults(), this.cacheElements(), this.bindEvents(), this.subscriptions()
        },
        populateDefaults: function() {
            this.partials.carrierPartial = this._templateLoader("#carrierTemplate")
        },
        cacheElements: function() {
            this.$container = $("#resultFilter"), this.template = this._templateLoader("#resultFilterTemplate")
        },
        bindEvents: function() {
            var _this = this;
            this.$container.on("click", ".allFilter", this._toggleFilterView), this.$container.on("keyup", ".flightNoSearch", _.throttle(function(event) {
                var $target = $(event.target);
                _this._filterFltNum($target.val())
            }, 300)), this.$container.on("click", ".onlyBtn", this._selectOnlyAirline.bind(this)), this.$container.on("click", "#flt_all", this._toggleAllAirlines.bind(this)), this.$container.on("change", ".airlines .clonedCBox > .customCBox > input", this._toggleAirline.bind(this)), this.$container.on("change", ".stopsFilter input", this._toggleStop.bind(this)), this.$container.on("change", ".times input", this._toggleTime.bind(this)), this.$container.on("change", ".others input", this._toggleAmenity.bind(this)), this.$container.on("click", ".clearFilter", this._updateView.bind(this)), $("body").on("click", function(event) {
                var $target = $(event.target),
                    $filter = $(".allFilterList:visible");
                !$filter.length || $target.hasClass(".allFilterList") || $target.parents().hasClass(".allFilterList") || ($filter.hide(), $(".tipArrow").hide())
            })
        },
        subscriptions: function() {
            var self = this;
            $.subscribe("flights/showFilters", function(err, data) {
                self.criteria = data.criteria || self.criteria, self.stopSet = data.stopSet, self.airlineSet = data.airlineSet, self.minPrice = data.minPrice, self.maxPrice = data.maxPrice, self.fromCity = data.fromCity, self.toCity = data.toCity, self.isDomesticReturn = data.isDomesticReturn, self.isCombined = data.isCombined, self.currency = data.currency, self.render()
            }), $.subscribe("flights/showResetFilters", function(e, data) {
                $(".clearFilter").removeClass("clearFilterNone"), $(".filterResult").find("span:first-child").removeClass("filter-icon").addClass("filterApp-icon")
            }), $.subscribe("flights/hideResetFilters", function(e, data) {
                $(".clearFilter").addClass("clearFilterNone"), $(".filterResult").find("span:first-child").removeClass("filterApp-icon").addClass("filter-icon")
            })
        },
        render: function() {
            $(".loadingFirst").hide(), this.$container.html(this.template({
                stopSet: this.stopSet,
                fromCity: this.fromCity,
                toCity: this.toCity,
                isDomesticReturn: this.isDomesticReturn,
                isCombined: this.isCombined,
                currency: this.currency
            })), $("#filterBody > .airlines > .airlineFilter").append(this.partials.carrierPartial({
                carriers: this.airlineSet
            })), $(".clearFilter").addClass("clearFilterNone"), $(".filterResult").find("span:first-child").removeClass("filterApp-icon").addClass("filter-icon"), this._showSlider(this.minPrice, this.maxPrice), this.$container.find(".openClose").trigger("click")
        },
        _toggleFilterView: function(event) {
            event.stopPropagation();
            var classToUse = "." + $(this).attr("data-target") + ",." + $(this).attr("data-arrowtarget");
            $("." + $(this).attr("data-target")).is(":visible") ? $(classToUse).hide() : ($(".allFilterList, .tipArrow").hide(), $(classToUse).show())
        },
        _selectOnlyAirline: function(event) {
            var $target = $(event.target);
            $(".airlines .cBox").find("input").prop("checked", !1), $target.prevAll(".customCBox").find("input").prop("checked", !0);
            var filterText = $target.prev("label").attr("for"),
                filterTextName = $target.prev("label").html();
            this._filterAirlines([filterText]), $(".js-airportText").html(filterTextName)
        },
        _toggleAllAirlines: function(event) {
            var $target = $(event.target),
                checked = $target.prop("checked");
            $(".airlines .cBox").find("input").prop("checked", checked), checked ? (this._filterAirlines(["all"]), $(".js-airportText").html("All Airlines")) : (this._filterAirlines(["none"]), $(".js-airportText").html("Selected None"))
        },
        _toggleAirline: function(event) {
            var filterText = [],
                filterTextName = [],
                $airlines = $(".airlines .clonedCBox > .customCBox > input");
            $airlines.not(":checked").length ? ($("#flt_all").prop("checked", !1), $airlines.filter(":checked").each(function(i, el) {
                filterText.push($(el).val()), filterTextName.push($(el).data("carname"))
            }), $(".js-airportText").html(filterTextName.join(","))) : ($("#flt_all").prop("checked", !0), filterText = ["all"], $(".js-airportText").html("All Airlines")), this._filterAirlines(filterText)
        },
        _toggleStop: function(event) {
            var $stops = $(".stopsFilter input"),
                stopsList = [];
            $stops.filter(":checked").each(function(i, el) {
                stopsList.push(parseInt($(el).val(), 10))
            }), stopsList.length ? $(".js-stopsText").html(stopsList.join(",")) : $(".js-stopsText").html("Selected None"), this._filterStops(stopsList)
        },
        _toggleTime: function(event) {
            var $times = $(".times input"),
                timecheck = [],
                timesList = {
                    OD: [],
                    OA: [],
                    RD: [],
                    RA: []
                };
            $times.not(":checked").each(function(i, el) {
                var $el = $(el),
                    meta = $el.attr("id").substr(0, 2);
                timecheck[i] = $el.data("tip");
                var rangeFrom = parseInt($el.data("from"), 10),
                    rangeTo = parseInt($el.data("to"), 10);
                timesList[meta].push({
                    min: rangeFrom,
                    max: rangeTo
                })
            }), timecheck.length ? $(".js-timesText").html(timecheck.join(",")) : $(".js-timesText").html("All Times"), this._filterTimes(timesList)
        },
        _toggleAmenity: function(event) {
            var $itineraries = $(".others input"),
                itinList = [];
            $itineraries.filter(":checked").each(function(i, el) {
                itinList.push($(el).data("target"))
            }), this._filterItinerary(itinList), itinList.length ? $(".js-itineraryText").html(itinList.join(",")) : $(".js-itineraryText").html("All Itineraries")
        },
        _showSlider: function(min, max) {
            var minPrice = min,
                maxPrice = max,
                minClass = ".min .price",
                maxClass = ".max .price",
                _this = this;
            $("#priceRange").slider({
                range: !0,
                min: minPrice,
                max: maxPrice,
                values: [minPrice, maxPrice],
                slide: function(event, ui) {
                    $(minClass).attr("data-price", ui.values[0]).html(PRICE_FORMATTER.format(ui.values[0], null, "Rs.", !0)), $(maxClass).attr("data-price", ui.values[1]).html(PRICE_FORMATTER.format(ui.values[1], null, "Rs.", !0))
                },
                change: _.throttle(function(event, ui) {
                    _this._filterPrice($(minClass).attr("data-price"), $(maxClass).attr("data-price"))
                }, 300)
            }), $(minClass).attr("data-price", minPrice).html(PRICE_FORMATTER.format(minPrice, null, "Rs.", !0)), $(maxClass).attr("data-price", maxPrice).html(PRICE_FORMATTER.format(maxPrice, null, "Rs.", !0))
        },
        _templateLoader: function(tpl) {
            return _.template($(tpl).html(), {})
        },
        _updateView: function(el) {
            el.stopPropagation(), this.criteria = {}, $.publish("flights/resultsFiltered", this.criteria), $(".lowFares-box").removeClass("selected"), this.render()
        },
        _filterPrice: function(min, max) {
            function filterWithin(low, high) {
                return function(num) {
                    return num >= low && num <= high
                }
            }
            this.criteria.price = {
                min: parseInt(min, 10),
                max: parseInt(max, 10),
                filterFn: filterWithin(min, max)
            }, $.publish("flights/resultsFiltered", this.criteria)
        },
        _filterFltNum: function(str) {
            function inString(within) {
                return function(strArr) {
                    return strArr.some(function(outer) {
                        return outer.indexOf(within) > -1
                    })
                }
            }
            var formattedStr = str.replace(/\s/g, "").toUpperCase();
            formattedStr.length ? this.criteria.fltNum = {
                str: str,
                filterFn: inString(formattedStr)
            } : this.criteria.hasOwnProperty("fltNum") && delete this.criteria.fltNum, $.publish("flights/resultsFiltered", this.criteria)
        },
        _filterAirlines: function(cdArr) {
            function matchAirlines(codes) {
                return function(cd) {
                    return codes.indexOf(cd) > -1
                }
            }
            "all" === cdArr[0] ? this.criteria.airlineCd = {
                code: "all",
                filterFn: this._truthyFunction
            } : "none" === cdArr[0] ? this.criteria.airlineCd = {
                code: "none",
                filterFn: this._falsyFunction
            } : cdArr.length ? this.criteria.airlineCd = {
                code: cdArr,
                filterFn: matchAirlines(cdArr)
            } : this.criteria.airlineCd = {
                code: "none",
                filterFn: this._falsyFunction
            }, $.publish("flights/resultsFiltered", this.criteria)
        },
        _filterStops: function(stopsList) {
            function matchStops(stopsList) {
                return function(stop) {
                    return stop > 2 ? stopsList.indexOf(3) > -1 : stopsList.indexOf(stop) > -1
                }
            }
            4 === stopsList.length ? this.criteria.stops = {
                stops: stopsList,
                filterFn: this._truthyFunction
            } : 0 === stopsList.length ? this.criteria.stops = {
                stops: stopsList,
                filterFn: this._falsyFunction
            } : this.criteria.stops = {
                stops: stopsList,
                filterFn: matchStops(stopsList)
            }, $.publish("flights/resultsFiltered", this.criteria)
        },
        _filterTimes: function(timesList) {
            function matchTimes(times) {
                return 0 === times.length ? _this._truthyFunction : function(time) {
                    return times.some(function(timeRange) {
                        return time >= timeRange.min && time <= timeRange.max
                    })
                }
            }
            var _this = this;
            this.criteria.times = {
                timesList: timesList,
                filterFn: matchTimes
            }, $.publish("flights/resultsFiltered", this.criteria)
        },
        _filterItinerary: function(itinList) {
            function filterItin(it) {
                return it
            }
            var _this = this;
            0 === itinList.length && (this.criteria.hasOwnProperty("amenities") && delete this.criteria.amenities, this.criteria.hasOwnProperty("baggage") && delete this.criteria.baggage), _.forEach(itinList, function(itin) {
                _this.criteria[itin] = {
                    filterFn: filterItin
                }
            }), $.publish("flights/resultsFiltered", this.criteria)
        },
        _truthyFunction: function(any) {
            return !0
        },
        _falsyFunction: function(any) {
            return !1
        }
    }, {
        ResultFilter: new ResultFilter
    }
}), via.define("via.flights", function() {
    function ResultWidgets() {
        this.initialize()
    }
    return ResultWidgets.prototype = {
        initialize: function() {
            this.cacheElements(), this.bindEvents(), this.subscriptions()
        },
        cacheElements: function() {
            this.$container = $("#searchResultContainer"), this.$cheapestContainer = this.$container.find("#cheap_flight_container"), this.$fastestContainer = this.$container.find("#fast_flight_container"), this.cheapestTemplate = _.template($("#flightResultsCheapestTemplate").html(), {}), this.fastestTemplate = _.template($("#flightResultsFastestTemplate").html(), {})
        },
        bindEvents: function() {
            var _this = this;
            this.$container.find("#cheap_flight").on("click", function() {
                _this.$container.find(".lowFaresHead").removeClass("activeFareHead"), $(this).addClass("activeFareHead"), _this.$container.find(".lowFares").hide(), _this.$cheapestContainer.css("display", "inline-block")
            }), this.$container.find("#fast_flight").on("click", function() {
                _this.$container.find(".lowFaresHead").removeClass("activeFareHead"), $(this).addClass("activeFareHead"), _this.$container.find(".lowFares").hide(), _this.$fastestContainer.css("display", "inline-block")
            }), this.$container.on("click", ".lowFares-box", this.triggerAirlineFilter.bind(this))
        },
        subscriptions: function() {
            var _this = this;
            $.subscribe("flights/widget/init", function(e, data) {
                var cheapestFlights = _.sortBy(data.cheapestFlights, "price"),
                    fastestFlights = _.sortBy(data.fastestFlights, "duration");
                _this.$container.find(".lowFaresHead").css("display", "inline-block"), _this.renderFastest(fastestFlights, data.options), _this.$cheapestContainer.css("display", "inline-block"), $(".flightPromoCont").removeClass("u_invisible"), _this.renderCheapest(cheapestFlights, data.options), $(".cheapFares-slider").jcarousel(), $(".cheapLArrow").jcarouselControl({
                    target: "-=3"
                }), $(".cheapRArrow").jcarouselControl({
                    target: "+=3"
                }), $("body").on("mouseover", ".js-toolTip", _this.renderTooltip.bind(this, {
                    my: "bottom center",
                    at: "top center"
                })), $("body").on("mouseover", ".js-toolTipLeft", _this.renderTooltip.bind(this, {
                    my: "bottom left",
                    at: "top left"
                }))
            })
        },
        renderTooltip: function(position, el) {
            var $target = $(el.target);
            $target.qtip({
                content: $target.attr("data-tip"),
                position: position,
                style: "holidayQtip",
                show: {
                    ready: !0
                },
                hide: {
                    event: "mouseout click scroll resize"
                },
                onHide: function() {
                    $target.qtip("destroy")
                }
            })
        },
        renderCheapest: function(cheapestFlights, currencyOptions) {
            this.$cheapestContainer.find(".cheap-box-container").html(this.cheapestTemplate({
                cheapestFlights: cheapestFlights,
                currencyOptions: currencyOptions
            }))
        },
        renderFastest: function(fastestFlights, currencyOptions) {
            this.$fastestContainer.find(".fast-box-container").html(this.fastestTemplate({
                fastestFlights: fastestFlights,
                currencyOptions: currencyOptions
            }))
        },
        triggerAirlineFilter: function(event) {
            var $triggerTarget, $evt = $(event.target),
                $target = $evt.hasClass("lowFares-box") ? $evt : $evt.parents(".lowFares-box"),
                text = "";
            $.publish("flights/resetBookPanelContainer", {}), $target.hasClass("selected") ? ($target.removeClass("selected"), $("#flt_all").trigger("click"), $.publish("flights/hideResetFilters", {})) : (text = $target.data("aircode").trim(), $target.addClass("selected").siblings(".selected").removeClass("selected"), $(".airlines label[for=" + text + "]").next(".onlyBtn").trigger("click"), $triggerTarget = $target.hasClass("fast-flight") ? $(".duration") : $(".pricePerAdult"), $triggerTarget.hasClass("asc") || $triggerTarget.trigger("click"))
        }
    }, {
        ResultWidgets: new ResultWidgets
    }
});